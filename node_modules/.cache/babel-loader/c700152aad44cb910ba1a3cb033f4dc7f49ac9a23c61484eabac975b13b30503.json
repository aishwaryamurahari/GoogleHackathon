{"ast":null,"code":"export class RouteService{constructor(map){this.directionsService=void 0;this.placesService=void 0;this.map=void 0;this.map=map;this.directionsService=new google.maps.DirectionsService();this.placesService=new google.maps.places.PlacesService(map);}async findPhotoWorthyRoutes(origin,destination){try{const routes=[];// Get routes for different travel modes\nconst travelModes=[{mode:google.maps.TravelMode.WALKING,name:'Walking'},{mode:google.maps.TravelMode.BICYCLING,name:'Cycling'},{mode:google.maps.TravelMode.DRIVING,name:'Driving'}];for(const travelMode of travelModes){try{const response=await this.getDirections(origin,destination,travelMode.mode);for(let i=0;i<response.routes.length;i++){var _route$legs$0$distanc;const route=response.routes[i];const photoSpots=await this.findPhotoSpotsAlongRoute(route);const photoScore=this.calculateEnhancedPhotoScore(photoSpots,route);const adjustedDuration=this.calculateAdjustedDuration(route,photoSpots);routes.push({id:`route-${travelMode.name}-${i}`,name:this.getRouteName(i,route,travelMode.name),distance:((_route$legs$0$distanc=route.legs[0].distance)===null||_route$legs$0$distanc===void 0?void 0:_route$legs$0$distanc.text)||'',duration:adjustedDuration,photoScore,photoSpots,path:this.extractPathFromRoute(route),travelMode:travelMode.name});}}catch(error){console.warn(`Failed to get ${travelMode.name} routes:`,error);}}// Sort routes by photo score, then by duration for similar scores\nreturn routes.sort((a,b)=>{if(Math.abs(a.photoScore-b.photoScore)<10){// If photo scores are close, prefer shorter duration\nreturn this.parseDuration(a.duration)-this.parseDuration(b.duration);}return b.photoScore-a.photoScore;});}catch(error){console.error('Error finding routes:',error);throw error;}}async getDirections(origin,destination,travelMode){return new Promise((resolve,reject)=>{this.directionsService.route({origin,destination,travelMode},(result,status)=>{if(status===google.maps.DirectionsStatus.OK&&result){resolve(result);}else{reject(new Error(`Directions request failed: ${status}`));}});});}async findPhotoSpotsAlongRoute(route){const photoSpots=[];const path=this.extractPathFromRoute(route);// Sample more points for longer routes\nconst numPoints=Math.min(Math.max(5,Math.floor(path.length/10)),15);const samplePoints=this.getSamplePoints(path,numPoints);for(const point of samplePoints){const spots=await this.searchNearbyPhotoSpots(point);photoSpots.push(...spots);}// Remove duplicates and sort by rating\nreturn this.deduplicatePhotoSpots(photoSpots).sort((a,b)=>b.rating-a.rating);}async searchNearbyPhotoSpots(location){return new Promise(resolve=>{this.placesService.nearbySearch({location:new google.maps.LatLng(location.lat,location.lng),radius:200,// Increased radius for better coverage\ntype:'point_of_interest',keyword:'photo|scenic|landmark|art|mural|cafe|park|view|museum|gallery|monument|statue|bridge|fountain|garden'},(results,status)=>{if(status===google.maps.places.PlacesServiceStatus.OK&&results){const photoSpots=results.filter(place=>place.rating&&place.rating>=3.5)// Lowered threshold for more variety\n.map(place=>{var _place$photos,_place$photos$,_place$geometry,_place$geometry$locat,_place$geometry2,_place$geometry2$loca,_place$geometry3,_place$geometry3$loca,_place$geometry4,_place$geometry4$loca;return{id:place.place_id||'',name:place.name||'',rating:place.rating||0,photoUrl:((_place$photos=place.photos)===null||_place$photos===void 0?void 0:(_place$photos$=_place$photos[0])===null||_place$photos$===void 0?void 0:_place$photos$.getUrl({maxWidth:150,maxHeight:100}))||`https://via.placeholder.com/150x100/4ECDC4/FFFFFF?text=${encodeURIComponent(place.name||'')}`,distance:this.calculateDistance(location,{lat:((_place$geometry=place.geometry)===null||_place$geometry===void 0?void 0:(_place$geometry$locat=_place$geometry.location)===null||_place$geometry$locat===void 0?void 0:_place$geometry$locat.lat())||0,lng:((_place$geometry2=place.geometry)===null||_place$geometry2===void 0?void 0:(_place$geometry2$loca=_place$geometry2.location)===null||_place$geometry2$loca===void 0?void 0:_place$geometry2$loca.lng())||0}),location:{lat:((_place$geometry3=place.geometry)===null||_place$geometry3===void 0?void 0:(_place$geometry3$loca=_place$geometry3.location)===null||_place$geometry3$loca===void 0?void 0:_place$geometry3$loca.lat())||0,lng:((_place$geometry4=place.geometry)===null||_place$geometry4===void 0?void 0:(_place$geometry4$loca=_place$geometry4.location)===null||_place$geometry4$loca===void 0?void 0:_place$geometry4$loca.lng())||0}};});resolve(photoSpots);}else{resolve([]);}});});}calculateEnhancedPhotoScore(photoSpots,route){var _route$legs$0$distanc2;if(photoSpots.length===0)return 0;const routeDistance=this.parseDistance(((_route$legs$0$distanc2=route.legs[0].distance)===null||_route$legs$0$distanc2===void 0?void 0:_route$legs$0$distanc2.text)||'0 km');const avgRating=photoSpots.reduce((sum,spot)=>sum+spot.rating,0)/photoSpots.length;// Enhanced scoring algorithm\nconst ratingScore=Math.min(40,(avgRating-3.0)*20);// 0-40 points\nconst quantityScore=Math.min(30,photoSpots.length*3);// 0-30 points\n// Density bonus: more spots per km = higher score\nconst spotsPerKm=photoSpots.length/Math.max(routeDistance,0.1);const densityScore=Math.min(20,spotsPerKm*5);// 0-20 points\n// Variety bonus: different types of spots\nconst uniqueTypes=new Set(photoSpots.map(spot=>this.getSpotType(spot.name))).size;const varietyScore=Math.min(10,uniqueTypes*2);// 0-10 points\nreturn Math.min(100,Math.max(0,Math.round(ratingScore+quantityScore+densityScore+varietyScore)));}calculateAdjustedDuration(route,photoSpots){var _route$legs$0$duratio;const baseDuration=this.parseDuration(((_route$legs$0$duratio=route.legs[0].duration)===null||_route$legs$0$duratio===void 0?void 0:_route$legs$0$duratio.text)||'0 min');// Add time for photo stops (5 minutes per photo spot)\nconst photoStopTime=photoSpots.length*5;const totalMinutes=baseDuration+photoStopTime;return this.formatDuration(totalMinutes);}parseDuration(durationText){const match=durationText.match(/(\\d+)\\s*(?:hour|hr|h|minute|min|m)/i);if(!match)return 0;const value=parseInt(match[1]);if(durationText.toLowerCase().includes('hour')||durationText.toLowerCase().includes('hr')||durationText.toLowerCase().includes('h')){return value*60;}return value;}parseDistance(distanceText){const match=distanceText.match(/(\\d+(?:\\.\\d+)?)\\s*(?:km|mi|m)/i);if(!match)return 0;const value=parseFloat(match[1]);if(distanceText.toLowerCase().includes('mi')){return value*1.60934;// Convert miles to km\n}if(distanceText.toLowerCase().includes('m')&&!distanceText.toLowerCase().includes('km')){return value/1000;// Convert meters to km\n}return value;}formatDuration(minutes){if(minutes<60){return`${minutes} min`;}const hours=Math.floor(minutes/60);const remainingMinutes=minutes%60;if(remainingMinutes===0){return`${hours} hour${hours>1?'s':''}`;}return`${hours} hour${hours>1?'s':''} ${remainingMinutes} min`;}getSpotType(name){const lowerName=name.toLowerCase();if(lowerName.includes('park')||lowerName.includes('garden'))return'park';if(lowerName.includes('museum')||lowerName.includes('gallery'))return'museum';if(lowerName.includes('cafe')||lowerName.includes('restaurant'))return'cafe';if(lowerName.includes('art')||lowerName.includes('mural'))return'art';if(lowerName.includes('bridge')||lowerName.includes('monument'))return'landmark';return'other';}extractPathFromRoute(route){const path=[];route.legs.forEach(leg=>{leg.steps.forEach(step=>{if(step.path){step.path.forEach(point=>{path.push({lat:point.lat(),lng:point.lng()});});}});});return path;}getSamplePoints(path,numPoints){if(path.length<=numPoints)return path;const step=Math.floor(path.length/numPoints);const samplePoints=[];for(let i=0;i<numPoints;i++){const index=i*step;samplePoints.push(path[index]);}return samplePoints;}calculateDistance(point1,point2){const R=6371;// Earth's radius in km\nconst dLat=(point2.lat-point1.lat)*Math.PI/180;const dLng=(point2.lng-point1.lng)*Math.PI/180;const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(point1.lat*Math.PI/180)*Math.cos(point2.lat*Math.PI/180)*Math.sin(dLng/2)*Math.sin(dLng/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));const distance=R*c*1000;// Convert to meters\nif(distance<1000){return`${Math.round(distance)}m`;}else{return`${(distance/1000).toFixed(1)}km`;}}deduplicatePhotoSpots(photoSpots){const seen=new Set();return photoSpots.filter(spot=>{if(seen.has(spot.id))return false;seen.add(spot.id);return true;});}getRouteName(index,route,travelMode){const names=['Scenic Route','Cultural Path','Art Walk','Historic Trail','Photo Route'];const baseName=names[index]||`Route ${index+1}`;return`${baseName} (${travelMode})`;}}","map":{"version":3,"names":["RouteService","constructor","map","directionsService","placesService","google","maps","DirectionsService","places","PlacesService","findPhotoWorthyRoutes","origin","destination","routes","travelModes","mode","TravelMode","WALKING","name","BICYCLING","DRIVING","travelMode","response","getDirections","i","length","_route$legs$0$distanc","route","photoSpots","findPhotoSpotsAlongRoute","photoScore","calculateEnhancedPhotoScore","adjustedDuration","calculateAdjustedDuration","push","id","getRouteName","distance","legs","text","duration","path","extractPathFromRoute","error","console","warn","sort","a","b","Math","abs","parseDuration","Promise","resolve","reject","result","status","DirectionsStatus","OK","Error","numPoints","min","max","floor","samplePoints","getSamplePoints","point","spots","searchNearbyPhotoSpots","deduplicatePhotoSpots","rating","location","nearbySearch","LatLng","lat","lng","radius","type","keyword","results","PlacesServiceStatus","filter","place","_place$photos","_place$photos$","_place$geometry","_place$geometry$locat","_place$geometry2","_place$geometry2$loca","_place$geometry3","_place$geometry3$loca","_place$geometry4","_place$geometry4$loca","place_id","photoUrl","photos","getUrl","maxWidth","maxHeight","encodeURIComponent","calculateDistance","geometry","_route$legs$0$distanc2","routeDistance","parseDistance","avgRating","reduce","sum","spot","ratingScore","quantityScore","spotsPerKm","densityScore","uniqueTypes","Set","getSpotType","size","varietyScore","round","_route$legs$0$duratio","baseDuration","photoStopTime","totalMinutes","formatDuration","durationText","match","value","parseInt","toLowerCase","includes","distanceText","parseFloat","minutes","hours","remainingMinutes","lowerName","forEach","leg","steps","step","index","point1","point2","R","dLat","PI","dLng","sin","cos","c","atan2","sqrt","toFixed","seen","has","add","names","baseName"],"sources":["/Users/aishwaryamurahari/Documents/study/GoogleHackathon/src/services/routeService.ts"],"sourcesContent":["import { Route, PhotoSpot } from '../types';\n\ndeclare global {\n  interface Window {\n    google: typeof google;\n  }\n}\n\nexport class RouteService {\n  private directionsService: google.maps.DirectionsService;\n  private placesService: google.maps.places.PlacesService;\n  private map: google.maps.Map;\n\n  constructor(map: google.maps.Map) {\n    this.map = map;\n    this.directionsService = new google.maps.DirectionsService();\n    this.placesService = new google.maps.places.PlacesService(map);\n  }\n\n  async findPhotoWorthyRoutes(origin: string, destination: string): Promise<Route[]> {\n    try {\n      const routes: Route[] = [];\n\n      // Get routes for different travel modes\n      const travelModes = [\n        { mode: google.maps.TravelMode.WALKING, name: 'Walking' },\n        { mode: google.maps.TravelMode.BICYCLING, name: 'Cycling' },\n        { mode: google.maps.TravelMode.DRIVING, name: 'Driving' }\n      ];\n\n      for (const travelMode of travelModes) {\n        try {\n          const response = await this.getDirections(origin, destination, travelMode.mode);\n\n          for (let i = 0; i < response.routes.length; i++) {\n            const route = response.routes[i];\n            const photoSpots = await this.findPhotoSpotsAlongRoute(route);\n            const photoScore = this.calculateEnhancedPhotoScore(photoSpots, route);\n            const adjustedDuration = this.calculateAdjustedDuration(route, photoSpots);\n\n            routes.push({\n              id: `route-${travelMode.name}-${i}`,\n              name: this.getRouteName(i, route, travelMode.name),\n              distance: route.legs[0].distance?.text || '',\n              duration: adjustedDuration,\n              photoScore,\n              photoSpots,\n              path: this.extractPathFromRoute(route),\n              travelMode: travelMode.name\n            });\n          }\n        } catch (error) {\n          console.warn(`Failed to get ${travelMode.name} routes:`, error);\n        }\n      }\n\n      // Sort routes by photo score, then by duration for similar scores\n      return routes.sort((a, b) => {\n        if (Math.abs(a.photoScore - b.photoScore) < 10) {\n          // If photo scores are close, prefer shorter duration\n          return this.parseDuration(a.duration) - this.parseDuration(b.duration);\n        }\n        return b.photoScore - a.photoScore;\n      });\n    } catch (error) {\n      console.error('Error finding routes:', error);\n      throw error;\n    }\n  }\n\n  private async getDirections(origin: string, destination: string, travelMode: google.maps.TravelMode): Promise<google.maps.DirectionsResult> {\n    return new Promise((resolve, reject) => {\n      this.directionsService.route(\n        {\n          origin,\n          destination,\n          travelMode\n        },\n        (result, status) => {\n          if (status === google.maps.DirectionsStatus.OK && result) {\n            resolve(result);\n          } else {\n            reject(new Error(`Directions request failed: ${status}`));\n          }\n        }\n      );\n    });\n  }\n\n  private async findPhotoSpotsAlongRoute(route: google.maps.DirectionsRoute): Promise<PhotoSpot[]> {\n    const photoSpots: PhotoSpot[] = [];\n    const path = this.extractPathFromRoute(route);\n\n    // Sample more points for longer routes\n    const numPoints = Math.min(Math.max(5, Math.floor(path.length / 10)), 15);\n    const samplePoints = this.getSamplePoints(path, numPoints);\n\n    for (const point of samplePoints) {\n      const spots = await this.searchNearbyPhotoSpots(point);\n      photoSpots.push(...spots);\n    }\n\n    // Remove duplicates and sort by rating\n    return this.deduplicatePhotoSpots(photoSpots).sort((a, b) => b.rating - a.rating);\n  }\n\n  private async searchNearbyPhotoSpots(location: { lat: number; lng: number }): Promise<PhotoSpot[]> {\n    return new Promise((resolve) => {\n      this.placesService.nearbySearch(\n        {\n          location: new google.maps.LatLng(location.lat, location.lng),\n          radius: 200, // Increased radius for better coverage\n          type: 'point_of_interest',\n          keyword: 'photo|scenic|landmark|art|mural|cafe|park|view|museum|gallery|monument|statue|bridge|fountain|garden'\n        },\n        (results, status) => {\n          if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n            const photoSpots: PhotoSpot[] = results\n              .filter(place => place.rating && place.rating >= 3.5) // Lowered threshold for more variety\n              .map(place => ({\n                id: place.place_id || '',\n                name: place.name || '',\n                rating: place.rating || 0,\n                photoUrl: place.photos?.[0]?.getUrl({ maxWidth: 150, maxHeight: 100 }) ||\n                         `https://via.placeholder.com/150x100/4ECDC4/FFFFFF?text=${encodeURIComponent(place.name || '')}`,\n                distance: this.calculateDistance(location, { lat: place.geometry?.location?.lat() || 0, lng: place.geometry?.location?.lng() || 0 }),\n                location: {\n                  lat: place.geometry?.location?.lat() || 0,\n                  lng: place.geometry?.location?.lng() || 0\n                }\n              }));\n            resolve(photoSpots);\n          } else {\n            resolve([]);\n          }\n        }\n      );\n    });\n  }\n\n  private calculateEnhancedPhotoScore(photoSpots: PhotoSpot[], route: google.maps.DirectionsRoute): number {\n    if (photoSpots.length === 0) return 0;\n\n    const routeDistance = this.parseDistance(route.legs[0].distance?.text || '0 km');\n    const avgRating = photoSpots.reduce((sum, spot) => sum + spot.rating, 0) / photoSpots.length;\n\n    // Enhanced scoring algorithm\n    const ratingScore = Math.min(40, (avgRating - 3.0) * 20); // 0-40 points\n    const quantityScore = Math.min(30, photoSpots.length * 3); // 0-30 points\n\n    // Density bonus: more spots per km = higher score\n    const spotsPerKm = photoSpots.length / Math.max(routeDistance, 0.1);\n    const densityScore = Math.min(20, spotsPerKm * 5); // 0-20 points\n\n    // Variety bonus: different types of spots\n    const uniqueTypes = new Set(photoSpots.map(spot => this.getSpotType(spot.name))).size;\n    const varietyScore = Math.min(10, uniqueTypes * 2); // 0-10 points\n\n    return Math.min(100, Math.max(0, Math.round(ratingScore + quantityScore + densityScore + varietyScore)));\n  }\n\n  private calculateAdjustedDuration(route: google.maps.DirectionsRoute, photoSpots: PhotoSpot[]): string {\n    const baseDuration = this.parseDuration(route.legs[0].duration?.text || '0 min');\n\n    // Add time for photo stops (5 minutes per photo spot)\n    const photoStopTime = photoSpots.length * 5;\n    const totalMinutes = baseDuration + photoStopTime;\n\n    return this.formatDuration(totalMinutes);\n  }\n\n  private parseDuration(durationText: string): number {\n    const match = durationText.match(/(\\d+)\\s*(?:hour|hr|h|minute|min|m)/i);\n    if (!match) return 0;\n\n    const value = parseInt(match[1]);\n    if (durationText.toLowerCase().includes('hour') || durationText.toLowerCase().includes('hr') || durationText.toLowerCase().includes('h')) {\n      return value * 60;\n    }\n    return value;\n  }\n\n  private parseDistance(distanceText: string): number {\n    const match = distanceText.match(/(\\d+(?:\\.\\d+)?)\\s*(?:km|mi|m)/i);\n    if (!match) return 0;\n\n    const value = parseFloat(match[1]);\n    if (distanceText.toLowerCase().includes('mi')) {\n      return value * 1.60934; // Convert miles to km\n    }\n    if (distanceText.toLowerCase().includes('m') && !distanceText.toLowerCase().includes('km')) {\n      return value / 1000; // Convert meters to km\n    }\n    return value;\n  }\n\n  private formatDuration(minutes: number): string {\n    if (minutes < 60) {\n      return `${minutes} min`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    if (remainingMinutes === 0) {\n      return `${hours} hour${hours > 1 ? 's' : ''}`;\n    }\n    return `${hours} hour${hours > 1 ? 's' : ''} ${remainingMinutes} min`;\n  }\n\n  private getSpotType(name: string): string {\n    const lowerName = name.toLowerCase();\n    if (lowerName.includes('park') || lowerName.includes('garden')) return 'park';\n    if (lowerName.includes('museum') || lowerName.includes('gallery')) return 'museum';\n    if (lowerName.includes('cafe') || lowerName.includes('restaurant')) return 'cafe';\n    if (lowerName.includes('art') || lowerName.includes('mural')) return 'art';\n    if (lowerName.includes('bridge') || lowerName.includes('monument')) return 'landmark';\n    return 'other';\n  }\n\n  private extractPathFromRoute(route: google.maps.DirectionsRoute): Array<{ lat: number; lng: number }> {\n    const path: Array<{ lat: number; lng: number }> = [];\n\n    route.legs.forEach(leg => {\n      leg.steps.forEach(step => {\n        if (step.path) {\n          step.path.forEach(point => {\n            path.push({ lat: point.lat(), lng: point.lng() });\n          });\n        }\n      });\n    });\n\n    return path;\n  }\n\n  private getSamplePoints(path: Array<{ lat: number; lng: number }>, numPoints: number): Array<{ lat: number; lng: number }> {\n    if (path.length <= numPoints) return path;\n\n    const step = Math.floor(path.length / numPoints);\n    const samplePoints: Array<{ lat: number; lng: number }> = [];\n\n    for (let i = 0; i < numPoints; i++) {\n      const index = i * step;\n      samplePoints.push(path[index]);\n    }\n\n    return samplePoints;\n  }\n\n  private calculateDistance(point1: { lat: number; lng: number }, point2: { lat: number; lng: number }): string {\n    const R = 6371; // Earth's radius in km\n    const dLat = (point2.lat - point1.lat) * Math.PI / 180;\n    const dLng = (point2.lng - point1.lng) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) *\n              Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c * 1000; // Convert to meters\n\n    if (distance < 1000) {\n      return `${Math.round(distance)}m`;\n    } else {\n      return `${(distance / 1000).toFixed(1)}km`;\n    }\n  }\n\n  private deduplicatePhotoSpots(photoSpots: PhotoSpot[]): PhotoSpot[] {\n    const seen = new Set<string>();\n    return photoSpots.filter(spot => {\n      if (seen.has(spot.id)) return false;\n      seen.add(spot.id);\n      return true;\n    });\n  }\n\n  private getRouteName(index: number, route: google.maps.DirectionsRoute, travelMode: string): string {\n    const names = ['Scenic Route', 'Cultural Path', 'Art Walk', 'Historic Trail', 'Photo Route'];\n    const baseName = names[index] || `Route ${index + 1}`;\n    return `${baseName} (${travelMode})`;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}